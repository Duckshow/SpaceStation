#pragma kernel Init
#pragma kernel InitBins
#pragma kernel ClearOutputTexture
#pragma kernel CacheParticlesInBins
#pragma kernel CacheClustersInBins
#pragma kernel ComputeDensity
#pragma kernel ComputePressure
#pragma kernel ComputeHeat
#pragma kernel ApplyHeat
#pragma kernel ComputeForces
#pragma kernel Integrate
#pragma kernel PreparePostProcess
#pragma kernel PostProcess

// solver parameters
static const float2 G = float2(0, 75 * -9.8); // external (gravitational) forces
static const float REST_DENS = 2500;// 300;// 1000; // rest density (basically repel, but slightly different)
static const float GAS_CONST = 900;// 500; // const for equation of state
static const float H = 1.0; // interaction radius
static const float HSQ = H * H; // radius^2 for optimization
static const float HSQ_TEMPERATURE = HSQ * 12.0; // interaction radius
static const float H_SURFACE_TENSION = H * 12.0; // interaction radius
static const float PARTICLE_MASS = 16.0; // assume all particles have the same mass
static const float PARTICLE_VISC = 6.0; // viscosity constant
static const float DT = 0.001;// 0.0008; // integration timestep
static const float DENSITY_OFFSET = 0.9;// 1.0;//0.825; // make SPIKY_GRAD apply force earlier (particles don't have to be as close)
static const float VISC_OFFSET = 0.8;//1.0;//1.0;//0.825; // make VISC_LAP apply force earlier (particles don't have to be as close)
static const float PI = 3.14159265359;

// smoothing kernels defined in Müller and their gradients
static const float POLY6 = 315.0 / (65.0 * PI * pow(H, 9.0));
static const float SPIKY_GRAD = -45.0 / (PI * pow(H * DENSITY_OFFSET, 6.0));
static const float VISC_LAP = 45.0 / (PI * pow(H * VISC_OFFSET, 6.0));

// simulation parameters
static const float EPS = H; // boundary epsilon
static const float BOUND_DAMPING = -0.5;

static const float MAX_TEMPERATURE = 1000.0;
static const float THERMAL_DIFFUSIVITY = 0.25;
static const float REPEL_STRENGTH_MIN = 4.0;
static const float REPEL_STRENGTH_MAX = 7.0;
static const float REPEL_FACTOR_MIN = 1.0 / REPEL_STRENGTH_MAX;
static const float REPEL_FACTOR_MAX = 1.0 / REPEL_STRENGTH_MIN;
static const float CLUSTERING_RESISTANCE = 1.0;//20.0;
static const float SURFACE_TENSION_WATER = 25.0;//250.0; // TODO: doesn't appear to work??

static const float STATE_CORRECTION_OFFSET = 0.000001; // offset to ensure two states can't be == 1 at the same time
static const float REPEL_STRENGTH_SMOOTHING_START_SOLID = 0.9;

static const float ALMOST_BUT_NOT_QUITE_ZERO = 0.00001; // used to prevent division by zero

static const half POSTPROCESS_BLURMOD_CLUSTERLOAD_STRENGTH = 25;// 35.0;
static const half POSTPROCESS_BLURMOD_LIQUID_GASEOUSNESS = 0.25;
static const half POSTPROCESS_BLURMOD_GAS_GASEOUSNESS = 1.0;

//#region[rgba(80, 0, 0, 1)] | WARNING: shared with ElementSimulator.cs! must be equal!

static const int OUTPUT_THREAD_COUNT_X = 16;
static const int OUTPUT_THREAD_COUNT_Y = 16;

static const int BINS_THREAD_COUNT = 16;

static const int THREAD_COUNT_X = 16; // TODO: this can in theory go up to 1024 - make it happen!
static const uint PIXELS_PER_TILE_EDGE = 16;
static const uint GRID_WIDTH_TILES = 16;
static const uint GRID_HEIGHT_TILES = 16;
static const uint GRID_WIDTH_PIXELS = PIXELS_PER_TILE_EDGE * GRID_WIDTH_TILES;
static const uint GRID_HEIGHT_PIXELS = PIXELS_PER_TILE_EDGE * GRID_HEIGHT_TILES;
static const uint BIN_SIZE = 8;
static const uint BIN_COUNT_X = GRID_WIDTH_PIXELS / BIN_SIZE;
static const uint BIN_COUNT_Y = GRID_HEIGHT_PIXELS / BIN_SIZE;
static const uint BIN_MAX_AMOUNT_OF_CONTENT = 8;
static const uint BIN_CLUSTER_SIZE = 9; // should be 9 but not sure how to fix
static const uint BIN_CLUSTER_CONTENT_MAX = BIN_CLUSTER_SIZE * BIN_MAX_AMOUNT_OF_CONTENT;
//#endregion

static const uint BIN_PIXEL_COUNT = BIN_SIZE * BIN_SIZE;


static const int ELEMENT_COUNT = 2;

static const half MASS[ELEMENT_COUNT] = { 
	PARTICLE_MASS * 1.0,
	PARTICLE_MASS * 1.0,
};
static const half VISCOSITY[ELEMENT_COUNT] = {
	PARTICLE_VISC * 1.0,
	PARTICLE_VISC * 1.0,
};
static const half TEMPERATURE_FREEZING_POINT[ELEMENT_COUNT] = {
	273.15,
	273.15,
};
static const half TEMPERATURE_BOILING_POINT[ELEMENT_COUNT] = {
	373.15,
	373.15,
};
static const half REPEL_STRENGTH_SOLID[ELEMENT_COUNT] = {
	1.75,
	1.75,
};
static const half REPEL_STRENGTH_LIQUID[ELEMENT_COUNT] = {
	1.5,
	1.5,
};
static const half REPEL_STRENGTH_GAS[ELEMENT_COUNT] = {
	2.0,
	2.0,
};
static const half THERMAL_DIFFUSIVITY_SOLID[ELEMENT_COUNT] = {
	1.0,
	1.0,
};
static const half THERMAL_DIFFUSIVITY_LIQUID[ELEMENT_COUNT] = {
	0.75,
	0.75,
};
static const half THERMAL_DIFFUSIVITY_GAS[ELEMENT_COUNT] = {
	0.5,
	0.5,
};
static const half4 COLOR_SOLID[ELEMENT_COUNT] = {
	half4(0.75, 1.0, 1.0, 1.0),
	half4(1.0, 1.0, 0.25, 1.0),
};
static const half4 COLOR_LIQUID[ELEMENT_COUNT] = {
	half4(0.5, 1.0, 1.0, 0.75),
	half4(1.0, 1.0, 0.0, 0.75),
};
static const half4 COLOR_GAS[ELEMENT_COUNT] = {
	half4(1.0, 1.0, 1.0, 0.5),
	half4(1.0, 1.0, 0.5, 0.5),
};


uint4 scale(uint4 f1, uint4 f2){
	return uint4(f1.x * f2.x, f1.y * f2.y, f1.z * f2.z, f1.w * f2.w);
}

int signNotZero(float f){
	int fSignActual = sign(f);
	return lerp(1, fSignActual, abs(fSignActual));
}

int sign01(float f){
	return clamp(sign(f), 0, 1);
}

int signAbs(float f){
	return abs(sign(f));
}

float PreventValueBeingZero(float f){
	return max(ALMOST_BUT_NOT_QUITE_ZERO, abs(f)) * signNotZero(f);
}

float2 PreventValueBeingZero(float2 f2){
	return float2(PreventValueBeingZero(f2.x), PreventValueBeingZero(f2.y));
}

struct Bin{ // WARNING: variables must correspond to ElementSimulator.cs's Bin!
	uint id;
	uint posX;
	uint posY;
	uint isDirty;
	uint load;
	uint contents[BIN_MAX_AMOUNT_OF_CONTENT];
	uint clusterLoad;
	uint clusterContents[BIN_CLUSTER_CONTENT_MAX];
	half4 color;
};

struct Particle{ // WARNING: variables must correspond to ElementSimulator.cs's Particle
	float2 pos;
	float2 velocity; 
	float2 force;
	float density;
	float pressure;
	float temperature;
	float temperatureStartFrame; 
	float repelFactor;
	half isActive; 
	half4 particlesToHeat;
	half4 heatToGive;

	uint elementIndex; 
	uint binID;


	half GetMass()						{ return MASS[elementIndex]; }
	half GetViscosity()					{ return VISCOSITY[elementIndex]; }
	half GetFreezingPoint()				{ return TEMPERATURE_FREEZING_POINT[elementIndex]; }
	half GetBoilingPoint()				{ return TEMPERATURE_BOILING_POINT[elementIndex]; }
	half GetRepelStrengthSolid()		{ return REPEL_STRENGTH_SOLID[elementIndex]; }
	half GetRepelStrengthLiquid()		{ return REPEL_STRENGTH_LIQUID[elementIndex]; }
	half GetRepelStrengthGas()			{ return REPEL_STRENGTH_GAS[elementIndex]; }
	half GetThermalDiffusivitySolid()	{ return THERMAL_DIFFUSIVITY_SOLID[elementIndex]; }
	half GetThermalDiffusivityLiquid()	{ return THERMAL_DIFFUSIVITY_LIQUID[elementIndex]; }
	half GetThermalDiffusivityGas()		{ return THERMAL_DIFFUSIVITY_GAS[elementIndex]; }
	half4 GetColorSolid()				{ return COLOR_SOLID[elementIndex]; }
	half4 GetColorLiquid()				{ return COLOR_LIQUID[elementIndex]; }
	half4 GetColorGas()					{ return COLOR_GAS[elementIndex]; }

	half IsSolid() {
		return step(temperatureStartFrame, GetFreezingPoint() + STATE_CORRECTION_OFFSET);
	}

	half IsLiquid() {
		return step(temperatureStartFrame, GetBoilingPoint() - STATE_CORRECTION_OFFSET) - IsSolid();
	}

	half IsGas() {
		return step(GetBoilingPoint() - STATE_CORRECTION_OFFSET, temperatureStartFrame);
	}

	half4 GetColor(){
		return IsSolid() * GetColorSolid() + IsLiquid() * GetColorLiquid() + IsGas() * GetColorGas();
	}

	half GetThermalDiffusivity() {
		return THERMAL_DIFFUSIVITY * (IsSolid() * GetThermalDiffusivitySolid() + IsLiquid() * GetThermalDiffusivityLiquid() + IsGas() * GetThermalDiffusivityGas());
	}

	half GetRepelStrengthCurrent()	{ 
		return IsSolid() * GetRepelStrengthSolid() + IsLiquid() * GetRepelStrengthLiquid() + IsGas() * GetRepelStrengthGas(); 
	}

	void SetTemperature(float temp){
		temperature = temp;

		float isSolid = IsSolid();
		float isLiquid = IsLiquid();
		float isGas = IsGas();

		float repelStrengthSolid = GetRepelStrengthSolid();
		float repelStrengthLiquid = GetRepelStrengthLiquid();
		float repelStrengthGas = GetRepelStrengthGas();

		// to prevent melting causing explosions, lerp the repelstrength
		float repelStrengthSmoothedSolidToLiquid = lerp(repelStrengthSolid, repelStrengthLiquid, clamp((temp - GetFreezingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID) / (GetFreezingPoint() - GetFreezingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID), 0, 1));
		float repelStrengthSmoothedLiquidToGas = lerp(repelStrengthLiquid, repelStrengthGas, clamp((temp - GetBoilingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID) / (GetBoilingPoint() - GetBoilingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID), 0, 1));

		// each state has a fixed strength, but gas continues the more temperature increases
		repelFactor = 0.0;
		repelFactor += (1.0 / repelStrengthSmoothedSolidToLiquid) * isSolid;
		repelFactor += (1.0 / repelStrengthSmoothedLiquidToGas) * isLiquid;
		repelFactor += (1.0 / repelStrengthGas) * isGas;

		float extraRepelFactor = 1.0 / clamp(max(REPEL_STRENGTH_MIN, temperature / MAX_TEMPERATURE * REPEL_STRENGTH_MAX), REPEL_STRENGTH_MIN, REPEL_STRENGTH_MAX);
		repelFactor += (extraRepelFactor - repelFactor) * isGas;

		repelFactor = clamp(repelFactor, REPEL_FACTOR_MIN, REPEL_FACTOR_MAX); // just a safeguard
	}
};


RWStructuredBuffer<Bin> bins;
RWStructuredBuffer<Particle> particles;
uniform uint particleCount;

RWTexture2D<float4> output;
uniform bool isFirstFrame;
uniform bool isEvenFrame;
half abort;


uint ConvertPosToBinPosX(float x) {
	return floor(x / BIN_SIZE);
}

uint ConvertPosToBinPosY(float y) {
	return floor(y / BIN_SIZE);
}

uint ConvertBinIDToBinPosX(uint id){
	return id % BIN_COUNT_X;
}

uint ConvertBinIDToBinPosY(uint id){
	return floor(id / BIN_COUNT_Y);
}

uint GetBinIDFromBinPos(uint x, uint y){
	return y * BIN_COUNT_X + x;
}

uint GetBinIDFromPos(uint2 pos){
	uint binPosX = ConvertPosToBinPosX(pos.x);
	uint binPosY = ConvertPosToBinPosY(pos.y);
	return binPosY * BIN_COUNT_X + binPosX;
}

void GetNeighboringParticles(uint binPosX, uint binPosY, out uint clusterLoad, out uint clusterContents[BIN_CLUSTER_CONTENT_MAX]){
	uint binIDs[BIN_CLUSTER_SIZE] = {
		GetBinIDFromBinPos(binPosX, binPosY),
		GetBinIDFromBinPos(binPosX - 1, binPosY),
		GetBinIDFromBinPos(binPosX + 1, binPosY),
		GetBinIDFromBinPos(binPosX, binPosY - 1),
		GetBinIDFromBinPos(binPosX, binPosY + 1),
		GetBinIDFromBinPos(binPosX - 1, binPosY - 1),
		GetBinIDFromBinPos(binPosX - 1, binPosY + 1),
		GetBinIDFromBinPos(binPosX + 1, binPosY + 1),
		GetBinIDFromBinPos(binPosX + 1, binPosY - 1),
	};

	uint safetyModLeft = signAbs(binPosX);
	uint safetyModRight = signAbs(BIN_COUNT_X - 1 - binPosX);
	uint safetyModDown = signAbs(binPosY);
	uint safetyModUp = signAbs(BIN_COUNT_Y - 1 - binPosY);
	uint binIDsSafetyMods[BIN_CLUSTER_SIZE] = {
		1,
		safetyModLeft,
		safetyModRight,
		safetyModDown,
		safetyModUp,
		safetyModLeft * safetyModDown,
		safetyModLeft * safetyModUp,
		safetyModRight * safetyModUp,
		safetyModRight * safetyModDown
	};

	Bin bin;
	uint binLoad;
	uint binContents[BIN_MAX_AMOUNT_OF_CONTENT];
	uint totalIndex = 0;
	uint binID;

	clusterLoad = 0;
	for(uint binIndex = 0; binIndex < BIN_CLUSTER_SIZE; binIndex++){
		binID = binIDs[binIndex];
		bin = bins[binID];

		binLoad = bin.load * binIDsSafetyMods[binIndex];
		binContents = bin.contents;

		for(uint contentIndex = 0; contentIndex < binLoad; contentIndex++){
			clusterContents[totalIndex] = binContents[contentIndex];
			clusterLoad += 1;
			totalIndex += 1;
		}
	}
}

// called once
[numthreads(THREAD_COUNT_X, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	particle.binID = GetBinIDFromPos(particle.pos);
	particle.SetTemperature(particle.temperatureStartFrame);
	particles[id.x] = particle;
}

[numthreads(BINS_THREAD_COUNT, 1, 1)]
void InitBins(uint3 id : SV_DispatchThreadID) {
	Bin bin = bins[id.x];
	bin.id = id.x;
	bin.posX = ConvertBinIDToBinPosX(id.x);
	bin.posY = ConvertBinIDToBinPosY(id.x);
	bins[id.x] = bin;
}

// called continuosly
[numthreads(OUTPUT_THREAD_COUNT_X, OUTPUT_THREAD_COUNT_Y, 1)]
void ClearOutputTexture(uint3 id : SV_DispatchThreadID) {
	output[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
}

[numthreads(BINS_THREAD_COUNT, 1, 1)]
void CacheParticlesInBins(uint3 id : SV_DispatchThreadID){
	Bin bin = bins[id.x];
	if(!isFirstFrame){
		if(bin.isDirty == 0){
			return;
		}
	}
	
	uint binLoad = 0;
	uint binContents[BIN_MAX_AMOUNT_OF_CONTENT] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	if(isFirstFrame){
		bin.clusterLoad = binLoad;

		for(uint i = 0; i < particleCount; i++){
			Particle particle = particles[i];
			if(particle.binID == bin.id){
				binContents[binLoad] = i;
				binLoad += 1;
			}

			if(binLoad >= BIN_MAX_AMOUNT_OF_CONTENT){
				break;
			}
		}
	}
	else{
		for(uint i = 0; i < bin.clusterLoad; i++){
			int particleIndex = bin.clusterContents[i];	
			Particle particle = particles[particleIndex];

			if(particle.binID == bin.id){
				binContents[binLoad] = particleIndex;
				binLoad += 1;

				if(binLoad >= BIN_MAX_AMOUNT_OF_CONTENT){
					break;
				}
			}
		}
	}

	bin.isDirty = isFirstFrame;
	bin.load = binLoad;
	bin.contents = binContents;
	bins[id.x] = bin;
}

[numthreads(BINS_THREAD_COUNT, 1, 1)]
void CacheClustersInBins(uint3 id : SV_DispatchThreadID){
	Bin bin = bins[id.x];
	GetNeighboringParticles(bin.posX, bin.posY, bin.clusterLoad, bin.clusterContents);
	bins[id.x] = bin;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputeDensity(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	Bin bin = bins[particle.binID];

	particle.density = particle.GetMass() * POLY6 * pow(HSQ, 2.0);
	for (uint i = 0; i < bin.clusterLoad; i++){
		uint neighborIndex = bin.clusterContents[i];

		Particle otherParticle = particles[neighborIndex];
		float2 dir = otherParticle.pos - particle.pos;
		float r2 = (dir.x * dir.x + dir.y * dir.y) * max(particle.repelFactor, otherParticle.repelFactor);

		half areParticlesDifferent = signAbs(id.x - neighborIndex);
		half shouldApplyDensity = areParticlesDifferent * step(r2, HSQ);
		particle.density += shouldApplyDensity * otherParticle.GetMass() * POLY6 * pow(HSQ - r2, 2.0);
	}

	particles[id.x] = particle;
	
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputePressure(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	particle.pressure = particle.isActive * GAS_CONST * (particle.density - REST_DENS);
	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputeHeat(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	Bin bin = bins[particle.binID];

	for (uint i = 0; i < bin.clusterLoad; i++){
		uint neighborIndex = bin.clusterContents[i];

		Particle otherParticle = particles[neighborIndex];
		float2 dir = otherParticle.pos - particle.pos;
		float r2 = (dir.x * dir.x + dir.y * dir.y) * max(particle.repelFactor, otherParticle.repelFactor);

		half areParticlesDifferent = signAbs(id.x - neighborIndex);
		half shouldApplyDensity = areParticlesDifferent * step(r2, HSQ);

		half temperatureStartFrame = particle.temperatureStartFrame;
		half temperatureStartFrameOther = otherParticle.temperatureStartFrame;
		
		half isWithinRange = step(r2, HSQ_TEMPERATURE);

		half isWarmerThanNeighbor = step(temperatureStartFrameOther, temperatureStartFrame);
		half isNeighborBelowMaxHeat = step(otherParticle.temperatureStartFrame, MAX_TEMPERATURE);
		half shouldApplyTemperature = isWarmerThanNeighbor * areParticlesDifferent * isWithinRange * isNeighborBelowMaxHeat;

		half thermalDiffusivity = (particle.GetThermalDiffusivity() + otherParticle.GetThermalDiffusivity()) * 0.5;
		half exchangeGive = shouldApplyTemperature * (temperatureStartFrame - temperatureStartFrameOther) * thermalDiffusivity;

		half4 particlesToHeat = particle.particlesToHeat;
		half4 heatToGive = particle.heatToGive; 

		if(exchangeGive > heatToGive.w){
			heatToGive.x = heatToGive.y;
			heatToGive.y = heatToGive.z;
			heatToGive.z = heatToGive.w;
			heatToGive.w = exchangeGive;

			particlesToHeat.x = particlesToHeat.y;
			particlesToHeat.y = particlesToHeat.z;
			particlesToHeat.z = particlesToHeat.w;
			particlesToHeat.w = neighborIndex;
		}
		else if(exchangeGive > heatToGive.z){
			heatToGive.x = heatToGive.y;
			heatToGive.y = heatToGive.z;
			heatToGive.z = exchangeGive;

			particlesToHeat.x = particlesToHeat.y;
			particlesToHeat.y = particlesToHeat.z;
			particlesToHeat.z = neighborIndex;
		}
		else if(exchangeGive > heatToGive.y){
			heatToGive.x = heatToGive.y;
			heatToGive.y = exchangeGive;

			particlesToHeat.x = particlesToHeat.y;
			particlesToHeat.y = neighborIndex;
		}
		else if(exchangeGive > heatToGive.x){
			heatToGive.x = exchangeGive;
			particlesToHeat.x = neighborIndex;
		}

		particle.particlesToHeat = particlesToHeat;
		particle.heatToGive = heatToGive;
	}

	// clamp components
	half4 heatToGive = particle.heatToGive;
	half heat = particle.temperatureStartFrame;
	heatToGive.x = min(heatToGive.x, heat);
	heatToGive.y = min(heatToGive.y, heat - heatToGive.x);
	heatToGive.z = min(heatToGive.z, heat - (heatToGive.x + heatToGive.y));
	heatToGive.w = min(heatToGive.w, heat - (heatToGive.x + heatToGive.y + heatToGive.z));
	
	particle.heatToGive = heatToGive;

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ApplyHeat(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	Bin bin = bins[particle.binID];

	half heat = particle.temperatureStartFrame;
	for (uint i = 0; i < bin.clusterLoad; i++){
		uint neighborIndex = bin.clusterContents[i];

		Particle otherParticle = particles[neighborIndex];

		uint4 othersParticlesToHeat = otherParticle.particlesToHeat;
		half isParticleX = 1 - signAbs(othersParticlesToHeat.x - id.x);
		half isParticleY = 1 - signAbs(othersParticlesToHeat.y - id.x);
		half isParticleZ = 1 - signAbs(othersParticlesToHeat.z - id.x);
		half isParticleW = 1 - signAbs(othersParticlesToHeat.w - id.x);

		half4 othersHeatToGive = otherParticle.heatToGive; 
		heat += othersHeatToGive.x * isParticleX;
		heat += othersHeatToGive.y * isParticleY;
		heat += othersHeatToGive.z * isParticleZ;
		heat += othersHeatToGive.w * isParticleW;
	}

	half4 heatToGive = particle.heatToGive;
	particle.SetTemperature(heat - (heatToGive.x + heatToGive.y + heatToGive.z + heatToGive.w));

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputeForces(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	Bin bin = bins[particle.binID];

	float2 fpress = float2(0.0, 0.0);
	float2 fvisc = float2(0.0, 0.0);
	float2 fsurftens = float2(0.0, 0.0);
	float2 fgrav = G * particle.density;
	
	for (uint i = 0; i < bin.clusterLoad; i++){
		uint neighborIndex = bin.clusterContents[i];
	
		Particle otherParticle = particles[neighborIndex];

		float2 diff = PreventValueBeingZero(otherParticle.pos - particle.pos);
		float2 diffNormal = normalize(diff);
		float r = sqrt(diff.x * diff.x + diff.y * diff.y) * max(particle.repelFactor, otherParticle.repelFactor);

		uint areParticlesDifferent = signAbs(id.x - neighborIndex);
		half areParticlesMixable = 1 -signAbs(particle.elementIndex - otherParticle.elementIndex);
		uint isTouchingNeighbor = step(r, H);
		uint shouldApplyAnything = areParticlesDifferent * particle.isActive * otherParticle.isActive;
		if(shouldApplyAnything == 0) continue;

		fpress += shouldApplyAnything * isTouchingNeighbor * -diffNormal * otherParticle.GetMass() * (particle.pressure + otherParticle.pressure) / (2.0 * otherParticle.density) * SPIKY_GRAD * pow(H - r, 2.0) * CLUSTERING_RESISTANCE;
		fvisc += shouldApplyAnything * isTouchingNeighbor * areParticlesMixable * otherParticle.GetViscosity() * otherParticle.GetMass() * (otherParticle.velocity - particle.velocity) / otherParticle.density * VISC_LAP * (H - r);
		
		float shouldApplySurfaceTension = shouldApplyAnything * areParticlesMixable * floor((step(r, H_SURFACE_TENSION) + particle.IsLiquid()) * 0.5);
		fsurftens += shouldApplySurfaceTension * diffNormal * VISC_LAP * SURFACE_TENSION_WATER;

		// bounce off frozen particles
		float shouldApplyBounce = shouldApplyAnything * isTouchingNeighbor * floor((isTouchingNeighbor + otherParticle.IsSolid()) / 2.0);
		particle.velocity *= lerp(1.0, diffNormal * BOUND_DAMPING, shouldApplyBounce);
	}

	particle.force = particle.isActive * (fpress + fvisc + fsurftens + fgrav);

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	particle.force.x = PreventValueBeingZero(particle.force.x);
	particle.force.y = PreventValueBeingZero(particle.force.y);
	particle.density = PreventValueBeingZero(particle.density);

	// forward Euler integration
	particle.velocity += DT * (particle.force / particle.density);
	particle.pos += DT * particle.velocity;

	float oldX = particle.pos.x;
	float oldY = particle.pos.y;
	particle.pos.x = clamp(particle.pos.x, EPS, GRID_WIDTH_PIXELS - EPS);
	particle.pos.y = clamp(particle.pos.y, EPS, GRID_HEIGHT_PIXELS - EPS);

	particle.velocity.x *= lerp(1.0, BOUND_DAMPING, clamp(ceil(abs(particle.pos.x - oldX)), 0, 1));
	particle.velocity.y *= lerp(1.0, BOUND_DAMPING, clamp(ceil(abs(particle.pos.y - oldY)), 0, 1));

	// output[particle.pos] = float4(1, 0, 0, 1);

	 // for next frame
	 uint oldBinID = particle.binID;
	 particle.binID = GetBinIDFromPos(particle.pos);

	if(particle.binID != oldBinID){
		bins[oldBinID].isDirty = 1;
		bins[particle.binID].isDirty = 1;
	}

	particle.temperatureStartFrame = particle.temperature;
	particle.particlesToHeat.xyzw = 0.0;
	particle.heatToGive.xyzw = 0.0;

	particles[id.x] = particle;
}

[numthreads(BINS_THREAD_COUNT, 1, 1)]
void PreparePostProcess(uint3 id : SV_DispatchThreadID){
	Bin bin = bins[id.x];

	uint hasContent = step(1, bin.load);
	half4 color = lerp(half4(0.0, 0.0, 0.0, 0.0), bin.color, hasContent);
	half gaseousness = 0.0;
	for(uint i = 0; i < bin.load; i++){
		Particle particle = particles[bin.contents[i]];

		half4 particleColor = particle.GetColor();
		color.xyz += particleColor.xyz;
		color.a = max(color.a, particleColor.a);
		gaseousness += particle.IsLiquid() * POSTPROCESS_BLURMOD_LIQUID_GASEOUSNESS + particle.IsGas() * POSTPROCESS_BLURMOD_GAS_GASEOUSNESS;

	}
	color.xyz /= max(1, bin.load);
	gaseousness /= max(1, bin.load);

	half clusterFillRatio = bin.clusterLoad / half(BIN_CLUSTER_CONTENT_MAX);
	half blurMod = lerp(1.0, clusterFillRatio * clusterFillRatio * POSTPROCESS_BLURMOD_CLUSTERLOAD_STRENGTH, gaseousness);
	color.a *= lerp(0.5, blurMod, hasContent);

	bin.color = color;
	bins[id.x] = bin;
}

[numthreads(OUTPUT_THREAD_COUNT_X, OUTPUT_THREAD_COUNT_Y, 1)]
void PostProcess(uint3 id : SV_DispatchThreadID){
	Bin bin = bins[GetBinIDFromPos(id.xy)];
	output[id.xy] += bin.color;
}